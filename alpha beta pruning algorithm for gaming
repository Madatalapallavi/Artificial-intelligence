class TicTacToe:
    def __init__(self):
        self.board = [' ' for _ in range(9)]  # A list to hold the board state
        self.current_player = 'X'  # AI is 'X'

    def print_board(self):
        print("Current board:")
        for i in range(3):
            print(f"{self.board[i*3]} | {self.board[i*3 + 1]} | {self.board[i*3 + 2]}")
            if i < 2:
                print("---------")
        print()

    def is_winner(self, player):
        winning_combinations = [
            (0, 1, 2), (3, 4, 5), (6, 7, 8),  # Horizontal
            (0, 3, 6), (1, 4, 7), (2, 5, 8),  # Vertical
            (0, 4, 8), (2, 4, 6)               # Diagonal
        ]
        for a, b, c in winning_combinations:
            if self.board[a] == self.board[b] == self.board[c] == player:
                return True
        return False

    def is_board_full(self):
        return ' ' not in self.board

    def alpha_beta(self, depth, alpha, beta, is_maximizing):
        if self.is_winner('X'):
            return 10 - depth
        elif self.is_winner('O'):
            return depth - 10
        elif self.is_board_full():
            return 0

        if is_maximizing:
            best_score = float('-inf')
            for i in range(9):
                if self.board[i] == ' ':
                    self.board[i] = 'X'  # AI is 'X'
                    score = self.alpha_beta(depth + 1, alpha, beta, False)
                    self.board[i] = ' '
                    best_score = max(best_score, score)
                    alpha = max(alpha, best_score)
                    if beta <= alpha:
                        break  # Beta cut-off
            return best_score
        else:
            best_score = float('inf')
            for i in range(9):
                if self.board[i] == ' ':
                    self.board[i] = 'O'  # Player is 'O'
                    score = self.alpha_beta(depth + 1, alpha, beta, True)
                    self.board[i] = ' '
                    best_score = min(best_score, score)
                    beta = min(beta, best_score)
                    if beta <= alpha:
                        break  # Alpha cut-off
            return best_score

    def best_move(self):
        best_score = float('-inf')
        move = None
        alpha = float('-inf')
        beta = float('inf')
        for i in range(9):
            if self.board[i] == ' ':
                self.board[i] = 'X'  # AI is 'X'
                score = self.alpha_beta(0, alpha, beta, False)
                self.board[i] = ' '
                if score > best_score:
                    best_score = score
                    move = i
        return move

    def play(self):
        while True:
            self.print_board()
            if self.current_player == 'X':
                move = self.best_move()
                self.board[move] = 'X'
                print(f"AI (X) plays at position {move + 1}")
            else:
                move = input("Player O, enter your move (1-9): ")
                try:
                    position = int(move) - 1
                    if position < 0 or position > 8 or self.board[position] != ' ':
                        print("Invalid move. Try again.")
                        continue
                    self.board[position] = 'O'
                except ValueError:
                    print("Invalid input. Please enter a number between 1 and 9.")
                    continue

            if self.is_winner('X'):
                self.print_board()
                print("AI (X) wins!")
                break
            elif self.is_winner('O'):
                self.print_board()
                print("Player O wins!")
                break
            elif self.is_board_full():
                self.print_board()
                print("It's a draw!")
                break

            self.current_player = 'O' if self.current_player == 'X' else 'X'

if __name__ == "__main__":
    game = TicTacToe()
    game.play()

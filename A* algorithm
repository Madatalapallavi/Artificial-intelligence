import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position  # (x, y) coordinates
        self.parent = parent
        self.g = 0  # Cost from start to current node
        self.h = 0  # Heuristic cost to target
        self.f = 0  # Total cost

    def __eq__(self, other):
        return self.position == other.position

def heuristic(a, b):
    # Using Manhattan distance as the heuristic
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def astar(grid, start, end):
    open_list = []
    closed_list = set()

    start_node = Node(start)
    end_node = Node(end)

    # Add the start node to the open list
    heapq.heappush(open_list, (start_node.f, start_node))

    while open_list:
        # Get the current node
        current_node = heapq.heappop(open_list)[1]
        closed_list.add(current_node)

        # Check if we reached the goal
        if current_node == end_node:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path

        # Get neighbors (4 possible directions)
        neighbors = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        for new_position in neighbors:
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])

            # Check if within grid bounds and walkable
            if (0 <= node_position[0] < len(grid)) and (0 <= node_position[1] < len(grid[0])) and grid[node_position[0]][node_position[1]] == 0:
                neighbor_node = Node(node_position, current_node)

                if neighbor_node in closed_list:
                    continue

                # Calculate costs
                neighbor_node.g = current_node.g + 1
                neighbor_node.h = heuristic(neighbor_node.position, end_node.position)
                neighbor_node.f = neighbor_node.g + neighbor_node.h

                # Check if the neighbor is already in the open list
                if any(open_node[1] == neighbor_node and open_node[1].g <= neighbor_node.g for open_node in open_list):
                    continue

                # Add neighbor to open list
                heapq.heappush(open_list, (neighbor_node.f, neighbor_node))

    return None  # No path found

# Example usage
if __name__ == "__main__":
    # 0: walkable, 1: blocked
    grid = [
        [0, 0, 0, 0, 0],
        [1, 1, 0, 1, 0],
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0]
    ]

    start = (0, 0)  # Starting position
    end = (4, 4)    # Target position

    path = astar(grid, start, end)
    
    if path:
        print("Path found:", path)
    else:
        print("No path found")
